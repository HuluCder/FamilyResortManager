using FamilyResortManager.Data.DataBase;
using FamilyResortManager.Data.DataBase.Models;
using FamilyResortManager.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using System;
using System.Threading.Tasks;

namespace FamilyResortManager.Pages.Client.Bookings
{
    public class CreateModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly EmailService _emailService;

        [BindProperty] public Booking Booking { get; set; }

        public string RoomNumber { get; set; }

        public CreateModel(AppDbContext context, EmailService emailService)
        {
            _context = context;
            _emailService = emailService;
        }

        public async Task<IActionResult> OnGetAsync(int roomId, DateTime checkInDate, DateTime checkOutDate)
        {
            var room = await _context.Rooms.FindAsync(roomId);
            if (room == null)
            {
                return NotFound();
            }

            RoomNumber = room.Number;

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: 13:00 –¥–ª—è –≤—ä–µ–∑–¥–∞, 10:00 –¥–ª—è –≤—ã–µ–∑–¥–∞
            checkInDate = checkInDate.Date.AddHours(13);
            checkOutDate = checkOutDate.Date.AddHours(10);

            Booking = new Booking
            {
                RoomId = roomId,
                CheckInDate = checkInDate,
                CheckOutDate = checkOutDate,
                Status = "–û–∂–∏–¥–∞–Ω–∏–µ",
                Client = new Data.DataBase.Models.Client()
            };

            return Page();
        }

        public async Task<IActionResult> OnPostCreateBookingAsync()
        {
            try
            {
                var form = Request.Form;

                int roomId = int.Parse(form["Input.RoomId"]);
                // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º UTC
                DateTime checkInDate = DateTime.Parse(form["Input.CheckInDate"], null,
                    System.Globalization.DateTimeStyles.AdjustToUniversal);
                DateTime checkOutDate = DateTime.Parse(form["Input.CheckOutDate"], null,
                    System.Globalization.DateTimeStyles.AdjustToUniversal);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç
                if (checkOutDate <= checkInDate)
                {
                    return StatusCode(400, "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –≤—ä–µ–∑–¥–∞.");
                }

                string clientName = form["ClientName"];
                string clientEmail = form["ClientEmail"];
                string clientPhone = form["ClientPhone"];

                // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–µ–µ—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
                bool hasConflict = await _context.Bookings.AnyAsync(b =>
                    b.RoomId == roomId &&
                    b.Status != "–û—Ç–º–µ–Ω–µ–Ω–æ" &&
                    b.CheckInDate < checkOutDate &&
                    b.CheckOutDate > checkInDate);

                if (hasConflict)
                {
                    return StatusCode(409, "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.");
                }

                // üë§ –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                var existingClient = await _context.Clients.FirstOrDefaultAsync(c => c.Phone == clientPhone);
                int clientId;

                if (existingClient == null)
                {
                    var newClient = new Data.DataBase.Models.Client
                    {
                        Name = clientName,
                        Email = clientEmail,
                        Phone = clientPhone,
                        Info = "–° —Å–∞–π—Ç–∞"
                    };

                    _context.Clients.Add(newClient);
                    await _context.SaveChangesAsync();

                    clientId = newClient.Id;
                }
                else
                {
                    clientId = existingClient.Id;
                }

                // üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                var booking = new Booking
                {
                    RoomId = roomId,
                    ClientId = clientId,
                    CheckInDate = checkInDate,
                    CheckOutDate = checkOutDate,
                    Status = "–û–∂–∏–¥–∞–Ω–∏–µ"
                };

                _context.Bookings.Add(booking);
                await _context.SaveChangesAsync();

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ
                var room = await _context.Rooms.FirstOrDefaultAsync(r => r.Id == roomId);
                var roomName = room != null ? $"‚Ññ{room.Number} ({room.Type})" : $"–ö–æ–º–Ω–∞—Ç–∞ ID {roomId}";

                // üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –∞–¥–º–∏–Ω—É
                var subject = "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ";
                var body = $@"
            <h3>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h3>
            <p><strong>–ò–º—è:</strong> {clientName}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {clientPhone}</p>
            <p><strong>Email:</strong> {clientEmail}</p>
            <p><strong>–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:</strong> {roomName}</p>
            <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> {checkInDate:dd.MM.yyyy HH:mm} ‚Äì {checkOutDate:dd.MM.yyyy HH:mm}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –û–∂–∏–¥–∞–Ω–∏–µ</p>
            <p><a href=""https://localhost:7058/Admin/Bookings/Details/{booking.Id}"">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ –≤ –∞–¥–º–∏–Ω–∫–µ</a></p>";

                await _emailService.SendEmailAsync("danya16f@gmail.com", subject, body);

                return new JsonResult(new { success = true });
            }
            catch (DbUpdateException dbEx)
            {
                var inner = dbEx.InnerException?.Message;
                Console.WriteLine("üî¥ EF Error: " + dbEx.Message);
                Console.WriteLine("üîß Inner: " + inner);

                return StatusCode(500, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: " + inner);
            }
            catch (Exception ex)
            {
                Console.WriteLine("‚ö†Ô∏è –û—à–∏–±–∫–∞: " + ex.Message);
                return StatusCode(500, "–û–±—â–∞—è –æ—à–∏–±–∫–∞: " + ex.Message);
            }
        }
    }
}
