@page
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model FamilyResortManager.Pages.Bookings.CalendarModel
@{
  Layout = "_Layout";
  ViewData["Title"] = "Календарь бронирований";
}

<div class="container mx-auto p-6">
  <div class="card animate__animated animate__fadeIn">
    <div class="card-header">
      <div class="flex items-center space-x-4">
        <div class="nav-arrow" onclick="navigateMonth(-1)" data-tippy-content="Предыдущий месяц">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="white">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </div>
        <span>Календарь бронирований</span>
        <div class="nav-arrow" onclick="navigateMonth(1)" data-tippy-content="Следующий месяц">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="white">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </div>
      </div>
      <a asp-page="/Bookings/Create" class="btn btn-primary animate__animated animate__pulse animate__infinite"
         data-tippy-content="Добавить новое бронирование">Добавить</a>
    </div>
    <div class="card-body">
      <!-- Date Range Picker and Room Type Selector -->
      <div class="filters mb-4">
        <div class="flex gap-4 flex-wrap">
          <div class="form-group">
            <label for="checkInDatePicker" class="form-label">Дата въезда</label>
            <input type="text" id="checkInDatePicker" class="form-control" placeholder="Выберите дату въезда" />
          </div>
          <div class="form-group">
            <label for="checkOutDatePicker" class="form-label">Дата выезда</label>
            <input type="text" id="checkOutDatePicker" class="form-control" placeholder="Выберите дату выезда" />
          </div>
          <div class="form-group">
            <label for="roomTypeSelect" class="form-label">Тип номера</label>
            <select id="roomTypeSelect" class="form-control">
              <option value="">Все типы</option>
              <option value="Стандарт" selected="@(Model.SelectedRoomType == "Стандарт")">Стандарт</option>
              <option value="Family стандарт" selected="@(Model.SelectedRoomType == "Family стандарт")">Family стандарт</option>
              <option value="Комфорт" selected="@(Model.SelectedRoomType == "Комфорт")">Комфорт</option>
              <option value="Family комфорт" selected="@(Model.SelectedRoomType == "Family комфорт")">Family комфорт</option>
              <option value="Полулюкс" selected="@(Model.SelectedRoomType == "Полулюкс")">Полулюкс</option>
              <option value="Люкс" selected="@(Model.SelectedRoomType == "Люкс")">Люкс</option>
              <option value="Коттедж" selected="@(Model.SelectedRoomType == "Коттедж")">Коттедж</option>
            </select>
          </div>
          <div class="form-group align-self-end">
            <button type="button" id="applyFilters" class="btn btn-primary">Применить</button>
            <button type="button" id="resetFilters" class="btn btn-secondary">Сбросить</button>
          </div>
        </div>
      </div>
      <div class="dropdown-container">
        <select id="monthSelect" onchange="updateCalendar()">
          @{
            for (int i = 1; i <= 12; i++)
            {
              var monthName = System.Globalization.CultureInfo.GetCultureInfo("ru-RU").DateTimeFormat.GetMonthName(i);
              <option value="@i" selected="@(i == Model.SelectedMonth)">@monthName</option>
            }
          }
        </select>
        <select id="yearSelect" onchange="updateCalendar()">
          @{
            for (int i = DateTime.UtcNow.Year - 5; i <= DateTime.UtcNow.Year + 5; i++)
            {
              <option value="@i" selected="@(i == Model.SelectedYear)">@i</option>
            }
          }
        </select>
      </div>
      <div class="calendar-container">
        <table class="calendar-table">
          <thead>
          <tr>
            <th>Номер</th>
            @for (DateTime date = Model.StartDate; date <= Model.EndDate; date = date.AddDays(1))
            {
              var isToday = date.Date == DateTime.UtcNow.Date;
              var isWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
              <th class="@(isToday ? "day-today" : "") @(isWeekend ? "day-weekend" : "")">
                @date.ToString("dd MMM", System.Globalization.CultureInfo.GetCultureInfo("ru-RU"))
                <br />
                @date.ToString("ddd", System.Globalization.CultureInfo.GetCultureInfo("ru-RU")).Substring(0, 2)
              </th>
            }
          </tr>
          </thead>
          <tbody>
          @foreach (var room in Model.Rooms.OrderBy(r => r.Number))
          {
            <tr class="animate__animated animate__fadeIn" style="animation-delay: @(Model.Rooms.ToList().IndexOf(room) * 0.1)s">
              <td class="room-header">
                <div class="room-info">
                  <span class="room-number">@room.Number</span>
                  <span class="room-type">@room.Type</span>
                </div>
              </td>
              @{
                var cursor = Model.StartDate.Date;
                var roomBookings = Model.Bookings
                  .Where(b => b.RoomId == room.Id)
                  .OrderBy(b => b.CheckInDate)
                  .ToList();
                var roomPendingBookings = Model.PendingBookings
                  .Where(b => b.RoomId == room.Id)
                  .OrderBy(b => b.CheckInDate)
                  .ToList();
              }
              @while (cursor <= Model.EndDate.Date)
              {
                var confirmedBk = roomBookings.FirstOrDefault(b =>
                  b.CheckInDate.Date <= cursor && b.CheckOutDate.Date >= cursor);
                var pendingBk = roomPendingBookings.FirstOrDefault(b =>
                  b.CheckInDate.Date <= cursor && b.CheckOutDate.Date >= cursor);
                if (confirmedBk != null)
                {
                  var from = confirmedBk.CheckInDate.Date < Model.StartDate.Date
                    ? Model.StartDate.Date
                    : confirmedBk.CheckInDate.Date;
                  var to = confirmedBk.CheckOutDate.Date > Model.EndDate.Date
                    ? Model.EndDate.Date
                    : confirmedBk.CheckOutDate.Date;
                  var span = (to - cursor).Days + 1;
                  <td colspan="@span" class="calendar-booking booking-confirmed"
                      data-date="@cursor.ToString("yyyy-MM-dd")"
                      data-room-id="@room.Id">
                    @if (Model.IsAdmin)
                    {
                      <a asp-page="/Admin/Bookings/Details"
                         asp-route-id="@confirmedBk.Id"
                         class="booking-link">
                        @(confirmedBk.Client?.Name ?? "Клиент не указан")
                      </a>
                    }
                    else
                    {
                      <div class="booking-occupied"></div>
                    }
                  </td>
                  cursor = to.AddDays(1);
                }
                else if (pendingBk != null)
                {
                  var from = pendingBk.CheckInDate.Date < Model.StartDate.Date
                    ? Model.StartDate.Date
                    : pendingBk.CheckInDate.Date;
                  var to = pendingBk.CheckOutDate.Date > Model.EndDate.Date
                    ? Model.EndDate.Date
                    : pendingBk.CheckOutDate.Date;
                  var span = (to - cursor).Days + 1;
                  <td colspan="@span" class="calendar-booking booking-pending"
                      data-date="@cursor.ToString("yyyy-MM-dd")"
                      data-room-id="@room.Id">
                    @if (Model.IsAdmin)
                    {
                      <a asp-page="/Admin/Bookings/Details"
                         asp-route-id="@pendingBk.Id"
                         class="booking-link"
                         aria-label="Перейти к деталям ожидающего бронирования для @(pendingBk.Client?.Name ?? "клиента")">
                        @(pendingBk.Client?.Name ?? "Клиент не указан") (Ожидание)
                      </a>
                    }
                    else
                    {
                      <div class="booking-pending-indicator"></div>
                    }
                  </td>
                  cursor = to.AddDays(1);
                }
                else
                {
                  <td class="calendar-cell @(cursor == DateTime.UtcNow.Date ? "today" : "")"
                      data-date="@cursor.ToString("yyyy-MM-dd")"
                      data-room-id="@room.Id"
                      onclick="@(Model.IsAdmin ? "" : "selectDate(new Date('" + cursor.ToString("yyyy-MM-dd") + "'), " + room.Id + ")")"></td>
                  cursor = cursor.AddDays(1);
                }
              }
            </tr>
          }
          </tbody>
        </table>
      </div>
      @if (!Model.IsAdmin)
      {
        <!-- Информация о выбранном диапазоне дат без формы -->
        <div class="booking-info-container mt-4">
          <div class="card">
            <div class="card-header">
              <h3>Бронирование номера</h3>
            </div>
            <div class="card-body">
              <p class="mb-2">Выберите даты и номер для бронирования на календаре</p>
              <p id="selectionInfo" class="text-gray-600">Не выбрано</p>
              <button type="button" id="openBookingModalBtn"
                      class="btn btn-primary hidden"
                      data-bs-toggle="modal"
                      data-bs-target="#bookingModal"
                      disabled>
                Забронировать
              </button>
            </div>
          </div>
        </div>
        <!-- Модальное окно для бронирования -->
        <div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="bookingModalLabel">Заявка на бронирование</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
              </div>
              <div class="modal-body">
                <form id="bookingForm" method="post">
                  <input type="hidden" id="modalRoomId" name="roomId" />
                  <input type="hidden" id="modalCheckInDate" name="checkInDate" />
                  <input type="hidden" id="modalCheckOutDate" name="checkOutDate" />
                  <div class="mb-4">
                    <label class="form-label">Выбранные даты:</label>
                    <div class="p-3 bg-light rounded" id="modalDateRange"></div>
                  </div>
                  <div class="mb-4">
                    <label class="form-label">Выбранный номер:</label>
                    <div class="p-3 bg-light rounded" id="modalRoomNumber"></div>
                  </div>
                  <div class="form-group mb-4">
                    <label for="clientName" class="form-label">Ваше имя</label>
                    <input type="text" class="form-control" id="clientName" name="clientName" required />
                  </div>
                  <div class="form-group mb-4">
                    <label for="clientEmail" class="form-label">Email</label>
                    <input type="email" class="form-control" id="clientEmail" name="clientEmail" required />
                  </div>
                  <div class="form-group mb-4">
                    <label for="clientPhone" class="form-label">Телефон</label>
                    <input type="tel" class="form-control" id="clientPhone" name="clientPhone"
                           pattern="(\+7|8)\s?\(\d{3}\)\s?\d{3}-\d{2}-\d{2}"
                           placeholder="+7 (999) 123-45-67"
                           title="Введите номер в формате +7 (999) 123-45-67 или 8 (999) 123-45-67"
                           required />
                    <div class="invalid-feedback">
                      Пожалуйста, введите номер телефона в формате +7 (999) 123-45-67 или 8 (999) 123-45-67
                    </div>
                  </div>
                </form>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="submitBookingBtn">Отправить заявку</button>
              </div>
            </div>
          </div>
        </div>
        <!-- Модальное окно успешной отправки заявки -->
        <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="successModalLabel">Заявка отправлена!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
              </div>
              <div class="modal-body">
                <p>Ваша заявка на бронирование успешно отправлена.</p>
                <p>Мы свяжемся с вами в ближайшее время для подтверждения бронирования.</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Закрыть</button>
              </div>
            </div>
          </div>
        </div>
      }
    </div>
  </div>
</div>

@section Scripts {
  <link rel="stylesheet" href="~/css/calendar.css" asp-append-version="true" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr@4.6.13/dist/l10n/ru.js"></script>
  <script src="https://unpkg.com/@@popperjs/core@2"></script>
  <script src="https://unpkg.com/tippy.js@6/dist/tippy-bundle.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/inputmask@5/dist/inputmask.min.js"></script>
  <script>
    // Initialize Flatpickr
    document.addEventListener('DOMContentLoaded', function () {
      flatpickr("#checkInDatePicker", {
        dateFormat: "Y-m-d",
        minDate: "today",
        locale: "ru",
        onChange: function(selectedDates, dateStr) {
          // Set minDate for check-out picker
          const checkOutPicker = document.querySelector("#checkOutDatePicker")._flatpickr;
          checkOutPicker.set("minDate", dateStr);
        }
      });

      flatpickr("#checkOutDatePicker", {
        dateFormat: "Y-m-d",
        minDate: "today",
        locale: "ru"
      });

      // Apply filters (date range and room type)
      document.getElementById('applyFilters').addEventListener('click', function() {
        const checkInDate = document.getElementById('checkInDatePicker').value;
        const checkOutDate = document.getElementById('checkOutDatePicker').value;
        const roomType = document.getElementById('roomTypeSelect').value;
        const month = document.getElementById('monthSelect').value;
        const year = document.getElementById('yearSelect').value;

        if (checkInDate && checkOutDate) {
          if (new Date(checkOutDate) <= new Date(checkInDate)) {
            alert('Дата выезда должна быть позже даты въезда.');
            return;
          }
        }

        let url = `?month=${month}&year=${year}`;
        if (checkInDate) url += `&checkInDate=${checkInDate}`;
        if (checkOutDate) url += `&checkOutDate=${checkOutDate}`;
        if (roomType) url += `&roomType=${encodeURIComponent(roomType)}`;
        window.location.href = url;
      });

      // Reset filters
      document.getElementById('resetFilters').addEventListener('click', function() {
        const month = document.getElementById('monthSelect').value;
        const year = document.getElementById('yearSelect').value;
        document.getElementById('checkInDatePicker').value = '';
        document.getElementById('checkOutDatePicker').value = '';
        document.getElementById('roomTypeSelect').value = '';
        window.location.href = `?month=${month}&year=${year}`;
      });

      // Initialize Inputmask for phone number
      Inputmask({
        mask: ["+7 (999) 999-99-99", "8 (999) 999-99-99"],
        keepStatic: true,
        placeholder: "_",
        showMaskOnHover: true,
        showMaskOnFocus: true
      }).mask("#clientPhone");

      // Tippy.js initialization
      if (typeof tippy === 'function') {
        tippy('[data-tippy-content]');
      }

      // Equalize row heights
      equalizeRowHeights();

      // Bootstrap form validation
      const form = document.getElementById('bookingForm');
      form.addEventListener('submit', function (event) {
        if (!form.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      });

      // Restore scroll on modal close
      function restoreScroll() {
        document.body.style.overflow = '';
        document.body.style.paddingRight = '';
        document.body.classList.remove('modal-open');
      }

      const bookingModalElement = document.getElementById('bookingModal');
      if (bookingModalElement) {
        bookingModalElement.addEventListener('hidden.bs.modal', restoreScroll);
      }

      const successModalElement = document.getElementById('successModal');
      if (successModalElement) {
        successModalElement.addEventListener('hidden.bs.modal', restoreScroll);
      }
    });

    function equalizeRowHeights() {
      const rows = document.querySelectorAll('.calendar-table tbody tr');
      let maxHeight = 0;
      rows.forEach(row => {
        const height = row.offsetHeight;
        if (height > maxHeight) {
          maxHeight = height;
        }
      });
      rows.forEach(row => {
        row.style.height = `${maxHeight}px`;
      });
    }

    function navigateMonth(direction) {
      const monthSelect = document.getElementById('monthSelect');
      const yearSelect = document.getElementById('yearSelect');
      let currentMonth = parseInt(monthSelect.value);
      let currentYear = parseInt(yearSelect.value);
      currentMonth += direction;
      if (currentMonth > 12) {
        currentMonth = 1;
        currentYear++;
      } else if (currentMonth < 1) {
        currentMonth = 12;
        currentYear--;
      }
      monthSelect.value = currentMonth;
      yearSelect.value = currentYear;
      updateCalendar();
    }

    function updateCalendar() {
      const month = document.getElementById('monthSelect').value;
      const year = document.getElementById('yearSelect').value;
      const checkInDate = document.getElementById('checkInDatePicker').value;
      const checkOutDate = document.getElementById('checkOutDatePicker').value;
      const roomType = document.getElementById('roomTypeSelect').value;
      let url = `?month=${month}&year=${year}`;
      if (checkInDate) url += `&checkInDate=${checkInDate}`;
      if (checkOutDate) url += `&checkOutDate=${checkOutDate}`;
      if (roomType) url += `&roomType=${encodeURIComponent(roomType)}`;
      window.location.href = url;
    }

    let startDate = null;
    let endDate = null;
    let selectedRoomId = null;
    let selectedRoomNumber = null;

    function selectDate(date, roomId) {
      if (date < new Date().setHours(0, 0, 0, 0)) {
        alert('Нельзя выбрать дату в прошлом.');
        return;
      }
      const cell = document.querySelector(`td[data-date="${date.toISOString().split('T')[0]}"][data-room-id="${roomId}"]`);
      if (cell.querySelector('.booking-confirmed') || cell.querySelector('.booking-pending')) {
        alert('Эта дата уже занята или находится в стадии рассмотрения.');
        return;
      }
      if (!startDate) {
        startDate = date;
        selectedRoomId = roomId;
        const roomRow = cell.closest('tr');
        selectedRoomNumber = roomRow.querySelector('.room-number').textContent;
        highlightCell(date, roomId, 'selected-start');
        updateSelectionDisplay();
      } else if (!endDate && date >= startDate && roomId === selectedRoomId) {
        endDate = date;
        highlightCell(date, roomId, 'selected-end');
        highlightRange();
        updateSelectionDisplay();
        enableBookButton();
      } else {
        clearHighlights();
        startDate = date;
        endDate = null;
        selectedRoomId = roomId;
        const roomRow = cell.closest('tr');
        selectedRoomNumber = roomRow.querySelector('.room-number').textContent;
        highlightCell(date, roomId, 'selected-start');
        updateSelectionDisplay();
      }
    }

    function highlightCell(date, roomId, className) {
      const dateString = date.toISOString().split('T')[0];
      const cell = document.querySelector(`td[data-date="${dateString}"][data-room-id="${roomId}"]`);
      if (cell) {
        cell.classList.add(className);
      }
    }

    function highlightRange() {
      if (!startDate || !endDate || !selectedRoomId) return;
      let currentDate = new Date(startDate);
      while (currentDate <= endDate) {
        if (currentDate > startDate && currentDate < endDate) {
          highlightCell(currentDate, selectedRoomId, 'selected-range');
        }
        currentDate.setDate(currentDate.getDate() + 1);
      }
    }

    function clearHighlights() {
      document.querySelectorAll('.selected-start, .selected-end, .selected-range').forEach(el => {
        el.classList.remove('selected-start', `selected-end`, 'selected-range');
      });
    }

    function updateSelectionDisplay() {
      const info = document.getElementById('selectionInfo');
      if (startDate && !endDate) {
        info.textContent = `Выбрана дата заезда: ${formatDate(startDate)}, комната №${selectedRoomNumber}`;
      } else if (startDate && endDate) {
        const daysCount = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
        info.textContent = `Выбран период: ${formatDate(startDate)} - ${formatDate(endDate)} (${daysCount} дней), комната №${selectedRoomNumber}`;
      }
    }

    function enableBookButton() {
      const bookButton = document.getElementById('openBookingModalBtn');
      if (bookButton) {
        bookButton.disabled = false;
        bookButton.classList.remove('hidden');
        bookButton.onclick = function () {
          openBookingModal(selectedRoomId, startDate, endDate);
        };
      }
    }

    function openBookingModal(roomId, startDate, endDate) {
      if (!startDate || !endDate || !roomId) {
        console.error('Не все необходимые данные предоставлены для открытия модального окна');
        return;
      }

      document.getElementById('modalRoomId').value = roomId;
      document.getElementById('modalCheckInDate').value = startDate.toISOString().split('T')[0];
      document.getElementById('modalCheckOutDate').value = endDate.toISOString().split('T')[0];
      const daysCount = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
      document.getElementById('modalDateRange').textContent =
        `${formatDate(startDate)} - ${formatDate(endDate)} (${daysCount} дней)`;
      document.getElementById('modalRoomNumber').textContent = selectedRoomNumber;

      const bookingModal = new bootstrap.Modal(document.getElementById('bookingModal'), {
        // Опция для отключения блокировки прокрутки в Bootstrap 5
        scroll: true
      });

      bookingModal.show();

      // Восстановление прокрутки после открытия модального окна
      setTimeout(() => {
        document.body.classList.remove('modal-open');
        document.body.style.overflow = 'auto';
        document.body.style.paddingRight = '0';
      }, 50);

      document.getElementById('clientName').focus();
    }

    // Дополнительно добавьте обработчик события для Modal
    document.getElementById('bookingModal').addEventListener('shown.bs.modal', function () {
      document.body.classList.remove('modal-open');
      document.body.style.overflow = 'auto';
      document.body.style.paddingRight = '0';
    });


    function formatDate(date) {
      if (!(date instanceof Date)) {
        date = new Date(date);
      }
      return date.toLocaleDateString('ru-RU');
    }

    document.addEventListener('DOMContentLoaded', function () {
      const bookingModalElement = document.getElementById('bookingModal');
      if (bookingModalElement) {
        bookingModalElement.addEventListener('shown.bs.modal', function () {
          document.body.classList.remove('modal-open');
          document.body.style.paddingRight = '';
          const modalBackdrops = document.querySelectorAll('.modal-backdrop');
          modalBackdrops.forEach(backdrop => {
            backdrop.style.zIndex = '1040';
          });
          bookingModalElement.style.zIndex = '1050';
        });
      }

      const submitBtn = document.getElementById('submitBookingBtn');
      if (submitBtn) {
        submitBtn.addEventListener('click', async function () {
          const form = document.getElementById('bookingForm');
          const roomId = document.getElementById('modalRoomId').value;
          const checkInDate = document.getElementById('modalCheckInDate').value;
          const checkOutDate = document.getElementById('modalCheckOutDate').value;
          const clientName = document.getElementById('clientName').value;
          const clientEmail = document.getElementById('clientEmail').value;
          const clientPhone = document.getElementById('clientPhone').value;

          const overlap = existingBookings.some(b => {
            if (parseInt(b.RoomId) !== parseInt(roomId)) return false;
            const bStart = new Date(b.CheckInDate);
            const bEnd = new Date(b.CheckOutDate);
            const newStart = new Date(checkInDate);
            const newEnd = new Date(checkOutDate);
            return newStart < bEnd && newEnd > bStart;
          });

          if (overlap) {
            alert("Выбранный период уже занят. Пожалуйста, выберите другие даты.");
            return;
          }

          if (!form.checkValidity()) {
            form.classList.add('was-validated');
            return;
          }

          try {
            submitBtn.disabled = true;
            submitBtn.textContent = 'Отправка...';
            const formData = new FormData();
            formData.append('Input.RoomId', roomId);
            formData.append('Input.CheckInDate', checkInDate);
            formData.append('Input.CheckOutDate', checkOutDate);
            formData.append('Input.Status', 'Новое');
            formData.append('ClientName', clientName);
            formData.append('ClientEmail', clientEmail);
            formData.append('ClientPhone', clientPhone);

            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]');
            if (antiForgeryToken) {
              formData.append('__RequestVerificationToken', antiForgeryToken.value);
            }

            const response = await fetch('/Client/Bookings/Create?handler=CreateBooking', {
              method: 'POST',
              body: formData
            });

            if (response.redirected) {
              window.location.href = response.url;
              return;
            }

            const responseText = await response.text();
            if (response.status === 409) {
              alert("Выбранный период уже занят. Пожалуйста, выберите другие даты.");
              return;
            }

            if (response.ok) {
              console.log("Бронирование успешно создано!");
              const bookingModalInstance = bootstrap.Modal.getInstance(document.getElementById('bookingModal'));
              if (bookingModalInstance) {
                bookingModalInstance.hide();
              }
              form.reset();
              const successModal = new bootstrap.Modal(document.getElementById('successModal'));
              if (successModal) {
                successModal.show();
              }
              if (typeof clearHighlights === 'function') {
                clearHighlights();
              }
              startDate = null;
              endDate = null;
              selectedRoomId = null;
              selectedRoomNumber = null;
              const selectionInfoElement = document.getElementById('selectionInfo');
              if (selectionInfoElement) {
                selectionInfoElement.textContent = 'Не выбрано';
              }
              const bookButton = document.getElementById('openBookingModalBtn');
              if (bookButton) {
                bookButton.classList.add('calendar-hidden');
                bookButton.disabled = true;
              }
              window.location.reload();
            } else {
              console.error('Ошибка запроса:', responseText);
              if (responseText.includes('<span class="text-danger">')) {
                alert('Пожалуйста, проверьте правильность введенных данных.');
              } else {
                alert('Произошла ошибка при бронировании. Пожалуйста, попробуйте снова позже.');
              }
            }
          } catch (error) {
            console.error('Ошибка:', error);
            alert('Произошла ошибка при отправке заявки. Пожалуйста, попробуйте позже.');
          } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Забронировать';
          }
        });
      }

      const bookButton = document.getElementById('openBookingModalBtn');
      if (bookButton) {
        bookButton.classList.add('hidden');
        bookButton.disabled = true;
      }
    });

    const existingBookings = @Html.Raw(Json.Serialize(
                               Model.Bookings
                                 .Select(b => new {
                                   RoomId = b.RoomId,
                                   CheckInDate = b.CheckInDate.ToString("yyyy-MM-dd"),
                                   CheckOutDate = b.CheckOutDate.ToString("yyyy-MM-dd")
                                 })
                             ));
  </script>
}